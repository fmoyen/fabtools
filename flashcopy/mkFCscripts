#!/bin/ksh

####################################################################
# make_ALL_FC_scripts.sh

####################################################################
# Author : Fabrice MOYEN (Benchmark Manager - Montpellier - France)

# Release : V1.2 -  September, 8th 2008
#  -> Added the possibility to give source and target in parameters
#  -> Added the usage function.
# Release : V1.10 -  September, 2nd 2008
#  -> improve the design of the tool

####################################################################
# Main Program to Generate the FlashCopy scripts
#
####################################################################

#-----------------------------------------------------------
# Load the fabtools.conf file

if [ -f $PWD/fabtools.conf ]
then
   REP_SCRIPT=$PWD
else
   REP_SCRIPT=$0
   NB_CHAR=`echo $REP_SCRIPT | wc -c`
   NB_CHAR=`expr $NB_CHAR - 12`
   REP_SCRIPT=`echo $REP_SCRIPT | cut -c -$NB_CHAR`
fi

. $REP_SCRIPT/fabtools.conf

#-----------------------------------------------------------
# Variables

WORKDIR=$REP_TOOLS/FCscripts
LUNDIR=$WORKDIR/LUNID
DIR_WIN=/$WORKDIR/scripts_windows
DIR_AIX=/$WORKDIR/scripts_aix
DIR_DSCLI=/$WORKDIR/scripts_dscli

SCRIPT=$0

LOOP=1


#-----------------------------------------------------------
# Function usage

function usage
{
   echo
   echo "usage: $SCRIPT"
   echo "        [<source>] [<target>]"
   echo "        [-h]"
   echo "
Just type $SCRIPT to use the menu
  or
Give source and target to generate the Flashcopy scripts directly"
   echo
   echo "type $SCRIPT -h for this help."
   echo 
   echo
}


#-----------------------------------------------------------
# Function make_script

make_script() {
> $DIR_AIX/$FILE.sh

INC=0

while read Ai
do
   echo "$CMD \c" >> $DIR_AIX/$FILE.sh
   let INC+=1
   Bi=`awk 'NR==LIGNE { print $1 } ' LIGNE=$INC $B_FILE`
   echo "$Ai:$Bi" >> $DIR_AIX/$FILE.sh
done < $A_FILE

sed "s/dscli //" $DIR_AIX/$FILE.sh > $DIR_DSCLI/$FILE.dscli
sed "s/$/^M/" $DIR_DSCLI/$FILE.dscli > $DIR_WIN/$FILE.scr
}

#-----------------------------------------------------------
# Function A2B

A2B() {

A=$1
B=$2

A_FILE=$LUNDIR/${A}_LUNID.txt
B_FILE=$LUNDIR/${B}_LUNID.txt

# mkflash -record -persist
CMD="dscli mkflash -record -persist"
FILE=MK_PERM_${A}_2_${B}
make_script

# mkflash
CMD="dscli mkflash"
FILE=MK_TEMP_${A}_2_${B}
make_script

# rmflash -quiet
CMD="dscli rmflash -quiet"
FILE=RMFLASH_${A}_2_${B}
make_script

# resync -record -persist
CMD="dscli resyncflash -record -persist"
FILE=RESYNC_${A}_2_${B}
make_script

}

#-----------------------------------------------------------
# Function ReadMe

readme() {
echo "Generated scripts can be found here : $WORKDIR"
echo "-------------------------------------"
echo
echo "  + scripts_windows : scripts for easy_dscli tool (windows)"
echo
echo "  + scripts_aix     : scripts for AIX"
echo "                      (ksh <script_name.sh>)"
echo
echo "  + scripts_dscli   : scripts for dscli tool (windows/AIX)"
echo "                      (dscli -script <script_name.dscli>)"
echo
echo "NOTA : under AIX, prefer using scripts_dscli rather than scripts_aix"
echo "       (much faster and more stable)"
}


#-----------------------------------------------------------
# MAIN

if [ $# -eq 2 ]
then
  source=$1
  target=$2
  LOOP=0
else
  if [ $# -eq 1 ]
  then
    usage
    exit 0
  else
    source=""
    target=""
  fi
fi

mkdir -p $LUNDIR 2>/dev/null
mkdir -p $DIR_WIN 2>/dev/null
mkdir -p $DIR_AIX 2>/dev/null
mkdir -p $DIR_DSCLI 2>/dev/null

while [ $LOOP -eq 1 ] 
do
  clear
  echo "Please give me:"
  echo "---------------"
  echo
  echo "   1) the source name : $source"
  echo "   2) the target name : $target"
  echo
  echo "And then:"
  echo "---------"
  echo "   s) start the scripts generation"
  echo
  echo "Or:"
  echo "---"
  echo "   q) quit the program"
  echo 
  echo " choice: \c"
  read answer
  echo

  case $answer in

  1)
   echo "source name ($source) : \c" 
   read sourcetmp
   if [ X$sourcetmp != X ]
   then
     source=$sourcetmp
   fi

   if [ -f $LUNDIR/${source}_LUNID.txt ]
   then
     echo "the file $LUNDIR/${source}_LUNID.txt already exists."
     echo "Do you want to edit it (with vi) ? [y|n] (default is yes) : \c"
     read answer2
     
     case $answer2 in
       n|N)
         VI=0 
       ;;

       *)
         VI=1
       ;;
     esac

   else
     VI=1
   fi

     if [ $VI -eq 1 ]
     then
       vi $LUNDIR/${source}_LUNID.txt 
     fi
  ;;

     
  2)
   echo "target name ($target) : \c" 
   read targettmp
   if [ X$targettmp != X ]
   then
     target=$targettmp
   fi

   if [ -f $LUNDIR/${target}_LUNID.txt ]
   then
     echo "the file $LUNDIR/${target}_LUNID.txt already exists."
     echo "Do you want to edit it (with vi) ? [y|n] (default is yes) : \c"
     read answer2

     case $answer2 in
       n|N)
         VI=0
       ;;

       *)
         VI=1
       ;;
     esac

   else
     VI=1
   fi

     if [ $VI -eq 1 ]
     then
       vi $LUNDIR/${target}_LUNID.txt
     fi
  ;;


  s|S)
   if [ X$source = "X" ]
   then 
     echo "please provide the source name"
     echo "hit the enter key"
     read bidon
   else
     if [ X$target = "X" ]
     then
       echo "please provide the target name"
       echo "hit the enter key"
       read bidon
     else
       source_size=`cat $LUNDIR/${source}_LUNID.txt | wc -l`
       target_size=`cat $LUNDIR/${target}_LUNID.txt | wc -l`
       if [ $source_size -ne $target_size ]
       then
         echo "The files ${source}_LUNID.txt and ${target}_LUNID.txt do not have the same size"
         echo "   $LUNDIR/${source}_LUNID.txt : $source_size lines"
         echo "   $LUNDIR/${target}_LUNID.txt : $target_size lines"
         echo "Please correct the error and retry"
         echo "hit the enter key"
         read bidon
       else
         echo "scripts generation running ... " 
         LOOP=0
       fi
     fi
   fi
  ;;


  q|Q)
   echo "Exiting ..."
   exit 0
  ;;

  *)
   echo "Invalide answer ..."
   echo "hit the enter key"
   read bidon
  ;;  

  esac
done
 
if [ ! -f $LUNDIR/${source}_LUNID.txt ]
then
  echo "The file $LUNDIR/${source}_LUNID.txt does not exist"
  echo "hit the enter key"
  read bidon
  exit 1
else
  if [ ! -f $LUNDIR/${target}_LUNID.txt ]
  then
    echo "The file $LUNDIR/${target}_LUNID.txt does not exist"
    echo "hit the enter key"
    read bidon
    exit 1
  else
    source_size=`cat $LUNDIR/${source}_LUNID.txt | wc -l`
    target_size=`cat $LUNDIR/${target}_LUNID.txt | wc -l`
    if [ $source_size -ne $target_size ]
    then
      echo "The files ${source}_LUNID.txt and ${target}_LUNID.txt do not have the same size"
      echo "   $LUNDIR/${source}_LUNID.txt : $source_size lines"
      echo "   $LUNDIR/${target}_LUNID.txt : $target_size lines"
      echo "Please correct the error and retry"
      echo "hit the enter key"
      read bidon
    else
      echo "scripts generation running ... "
    fi
  fi
fi



liste="$source $target"

for i in $liste
do
  for j in $liste
  do
    if [ $i != $j ]
    then 
      echo "$i -> $j"
      A2B $i $j
    fi
  done
done

echo
readme
readme > $WORKDIR/ReadMe
echo
echo "Bye"
